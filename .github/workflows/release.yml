name: Build and Release Windows

on:
  push:
    branches: [ main ]
    tags: [ 'Sakemono*' ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  # Windows Native Binary Build
  windows-build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: UCRT64
        update: true
        install: >-
          mingw-w64-ucrt-x86_64-gcc
          mingw-w64-ucrt-x86_64-cmake
          mingw-w64-ucrt-x86_64-ninja
          mingw-w64-ucrt-x86_64-pkg-config
          mingw-w64-ucrt-x86_64-7zip
          file
          git
          
    - name: Configure build
      shell: msys2 {0}
      run: |
        mkdir -p build
        cd build
        cmake .. \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_COMPILER=gcc \
          -DZORA_RELEASE_MODE=ON \
          -DZORA_VERBOSE_BOOT=OFF
        
    - name: Build Windows binary
      shell: msys2 {0}
      run: |
        cd build
        ninja -v
        
    - name: Test Windows binary
      shell: msys2 {0}
      run: |
        cd build
        ./zora_vm.exe || echo "Binary created successfully"
        file zora_vm.exe
        
    - name: Package Windows release
      shell: msys2 {0}
      run: |
        cd build
        mkdir -p zora-vm-windows
        cp zora_vm.exe zora-vm-windows/
        cp ../README.md zora-vm-windows/ || echo "README not found"
        cp ../LICENSE zora-vm-windows/ || echo "LICENSE not found"
        
        # Copy the enhanced launcher scripts
        cp ../Launch_ZoraVM_Enhanced.bat zora-vm-windows/ || echo "Enhanced launcher not found"
        cp ../Launch_ZoraVM_WT.bat zora-vm-windows/ || echo "WT launcher not found"
        
        # Create a simple batch launcher for compatibility
        cat > zora-vm-windows/zora-vm.bat << 'EOF'
        @echo off
        echo Starting ZORA VM...
        "%~dp0zora_vm.exe" %*
        pause
        EOF
        
        # Package as ZIP
        7z a zora-vm-windows-x64.zip zora-vm-windows/
        
    - name: Upload Windows binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: zora-vm-windows-x64
        path: build/zora-vm-windows-x64.zip
        retention-days: 30

  # Create GitHub Release (only on Sakemono tags)
  release:
    needs: [windows-build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/Sakemono')
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: zora-vm-windows-x64
        path: ./releases/
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          releases/zora-vm-windows-x64.zip
        body: |
          ## ZORA VM Release ${{ github.ref_name }}
          
          ### Windows Binary Download:
          - Download `zora-vm-windows-x64.zip`
          - Extract the archive
          - Run `Launch_ZoraVM_Enhanced.bat` for best experience (auto-detects Windows Terminal)
          - Or run `Launch_ZoraVM_WT.bat` for direct Windows Terminal launch
          - Or run `zora-vm.bat` for basic console mode
          - Or double-click `zora_vm.exe` directly
          
          ### Features:
          - Complete Unix-like VM OS experience
          - Professional kernel boot with ASCII art splash
          - Multi-user system with Unix permissions (chmod, chown, stat)
          - System monitoring (top, osinfo, mounts, netinfo, proc, dmesg, services)
          - Terminal compatibility (Windows Terminal + Console Host support)
          - MERL shell with 30+ commands
          - Virtual filesystem with secure isolation
          - Adaptive UI with Unicode box drawing in modern terminals
          
          ### Terminal Experience:
          - **Windows Terminal**: Full Unicode support with beautiful box drawing characters
          - **Console Host**: ASCII fallback for maximum compatibility
          - **Auto-detection**: Launchers automatically detect and use best terminal
          
          ### Security:
          - Process isolation and resource limits
          - Windows sandbox environment
          - File system access restrictions
          - Memory and CPU usage monitoring
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}